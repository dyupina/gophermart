name: Go Application

on:
  push:
    branches:
      - working_branch
      - master

jobs:
  build-and-run:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Go environment
      uses: actions/setup-go@v2
      with:
        go-version: '1.22'

    # - name: Run Linter
    #   uses: golangci/golangci-lint-action@v6
    #   with:
    #     version: v1.64

    - name: Run Unit Tests with Coverage
      run: |
        mkdir -p coverage
        go test -tags=unit ./... -coverprofile=coverage/coverage.out
        go tool cover -func=coverage/coverage.out

    # - name: Build and run in Docker using Docker-Compose
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y docker-compose
    #     cp .env.example .env
    #     docker-compose up -d # TODO временно


    # - name: Install Task
    #   uses: arduino/setup-task@v2
    #   with:
    #     version: 3.x
    #     repo-token: ${{ secrets.GITHUB_TOKEN }}

    # - name: Run Linter
    #   run: task lint

    # - name: Login to Docker Hub
    #   env:
    #     DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    #     DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}
    #   run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

    # - name: Build and run in Docker using Taskfile
    #   env:
    #     POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
    #     POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
    #     POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
    #     DB_HOST: ${{ secrets.DB_HOST }}
    #   run: task docker-run
