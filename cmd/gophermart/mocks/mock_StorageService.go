// Code generated by MockGen. DO NOT EDIT.
// Source: gophermart/cmd/gophermart/storage (interfaces: StorageService)

// Package mocks is a generated GoMock package.
package mocks

import (
	models "gophermart/cmd/gophermart/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorageService is a mock of StorageService interface.
type MockStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceMockRecorder
}

// MockStorageServiceMockRecorder is the mock recorder for MockStorageService.
type MockStorageServiceMockRecorder struct {
	mock *MockStorageService
}

// NewMockStorageService creates a new mock instance.
func NewMockStorageService(ctrl *gomock.Controller) *MockStorageService {
	mock := &MockStorageService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageService) EXPECT() *MockStorageServiceMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockStorageService) AddOrder(arg0 string, arg1 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockStorageServiceMockRecorder) AddOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockStorageService)(nil).AddOrder), arg0, arg1)
}

// CheckPasswordHash mocks base method.
func (m *MockStorageService) CheckPasswordHash(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordHash", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPasswordHash indicates an expected call of CheckPasswordHash.
func (mr *MockStorageServiceMockRecorder) CheckPasswordHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordHash", reflect.TypeOf((*MockStorageService)(nil).CheckPasswordHash), arg0, arg1)
}

// GetHashedPasswordByLogin mocks base method.
func (m *MockStorageService) GetHashedPasswordByLogin(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHashedPasswordByLogin", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHashedPasswordByLogin indicates an expected call of GetHashedPasswordByLogin.
func (mr *MockStorageServiceMockRecorder) GetHashedPasswordByLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHashedPasswordByLogin", reflect.TypeOf((*MockStorageService)(nil).GetHashedPasswordByLogin), arg0)
}

// GetLoginByUID mocks base method.
func (m *MockStorageService) GetLoginByUID(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoginByUID", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLoginByUID indicates an expected call of GetLoginByUID.
func (mr *MockStorageServiceMockRecorder) GetLoginByUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoginByUID", reflect.TypeOf((*MockStorageService)(nil).GetLoginByUID), arg0)
}

// GetOrders mocks base method.
func (m *MockStorageService) GetOrders(arg0 string) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockStorageServiceMockRecorder) GetOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockStorageService)(nil).GetOrders), arg0)
}

// GetUserBalance mocks base method.
func (m *MockStorageService) GetUserBalance(arg0 string) (models.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalance", arg0)
	ret0, _ := ret[0].(models.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalance indicates an expected call of GetUserBalance.
func (mr *MockStorageServiceMockRecorder) GetUserBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalance", reflect.TypeOf((*MockStorageService)(nil).GetUserBalance), arg0)
}

// GetUserWithdrawals mocks base method.
func (m *MockStorageService) GetUserWithdrawals(arg0 string) ([]models.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", arg0)
	ret0, _ := ret[0].([]models.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockStorageServiceMockRecorder) GetUserWithdrawals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockStorageService)(nil).GetUserWithdrawals), arg0)
}

// HashPassword mocks base method.
func (m *MockStorageService) HashPassword(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockStorageServiceMockRecorder) HashPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockStorageService)(nil).HashPassword), arg0)
}

// SaveLoginPassword mocks base method.
func (m *MockStorageService) SaveLoginPassword(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLoginPassword", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SaveLoginPassword indicates an expected call of SaveLoginPassword.
func (mr *MockStorageServiceMockRecorder) SaveLoginPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLoginPassword", reflect.TypeOf((*MockStorageService)(nil).SaveLoginPassword), arg0, arg1)
}

// SaveUID mocks base method.
func (m *MockStorageService) SaveUID(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUID indicates an expected call of SaveUID.
func (mr *MockStorageServiceMockRecorder) SaveUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUID", reflect.TypeOf((*MockStorageService)(nil).SaveUID), arg0, arg1)
}

// UpdateOrder mocks base method.
func (m *MockStorageService) UpdateOrder(arg0 int, arg1 string, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockStorageServiceMockRecorder) UpdateOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockStorageService)(nil).UpdateOrder), arg0, arg1, arg2)
}

// UpdateUserBalance mocks base method.
func (m *MockStorageService) UpdateUserBalance(arg0 string, arg1 int, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBalance", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserBalance indicates an expected call of UpdateUserBalance.
func (mr *MockStorageServiceMockRecorder) UpdateUserBalance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBalance", reflect.TypeOf((*MockStorageService)(nil).UpdateUserBalance), arg0, arg1, arg2)
}

// WithdrawFromUserBalance mocks base method.
func (m *MockStorageService) WithdrawFromUserBalance(arg0 string, arg1 int, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawFromUserBalance", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawFromUserBalance indicates an expected call of WithdrawFromUserBalance.
func (mr *MockStorageServiceMockRecorder) WithdrawFromUserBalance(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawFromUserBalance", reflect.TypeOf((*MockStorageService)(nil).WithdrawFromUserBalance), arg0, arg1, arg2)
}
